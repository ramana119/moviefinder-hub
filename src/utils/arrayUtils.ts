
/**
 * Polyfill for Array.findLastIndex to ensure compatibility with older browsers
 * @param array The array to search
 * @param predicate The function to execute on each element
 * @returns The index of the last element that satisfies the predicate, or -1 if none is found
 */
export function findLastIndex<T>(array: T[], predicate: (value: T, index: number, array: T[]) => boolean): number {
  if (!array || !Array.isArray(array)) return -1;
  
  for (let i = array.length - 1; i >= 0; i--) {
    if (predicate(array[i], i, array)) {
      return i;
    }
  }
  
  return -1;
}

/**
 * Groups an array by a key function
 * @param array The array to group
 * @param keyFn A function that returns the key to group by
 * @returns An object with keys generated by keyFn and values as arrays of matching items
 */
export function groupBy<T>(array: T[], keyFn: (item: T) => string): Record<string, T[]> {
  return array.reduce((result, item) => {
    const key = keyFn(item);
    result[key] = result[key] || [];
    result[key].push(item);
    return result;
  }, {} as Record<string, T[]>);
}

/**
 * Chunks an array into smaller arrays of a specified size
 * @param array The array to chunk
 * @param size The size of each chunk
 * @returns An array of chunks
 */
export function chunk<T>(array: T[], size: number): T[][] {
  if (!array.length || size < 1) return [];
  
  const chunks: T[][] = [];
  for (let i = 0; i < array.length; i += size) {
    chunks.push(array.slice(i, i + size));
  }
  
  return chunks;
}
